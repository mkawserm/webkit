
FAIL Reversing an animation inverts the playback rate div.animate is not a function. (In 'div.animate({}, {duration: 100 * MS_PER_SEC,
                                   iterations: Infinity})', 'div.animate' is undefined)
FAIL Reversing an animation plays a pausing animation div.animate is not a function. (In 'div.animate({}, {duration: 100 * MS_PER_SEC,
                                   iterations: Infinity})', 'div.animate' is undefined)
FAIL Reversing an animation maintains the same current time div.animate is not a function. (In 'div.animate({}, 100 * MS_PER_SEC)', 'div.animate' is undefined)
FAIL Reversing an animation does not cause it to leave the pending state div.animate is not a function. (In 'div.animate({}, { duration: 200 * MS_PER_SEC,
                                    delay: -100 * MS_PER_SEC })', 'div.animate' is undefined)
FAIL Reversing an animation does not cause it to resolve the ready promise div.animate is not a function. (In 'div.animate({}, { duration: 200 * MS_PER_SEC,
                                    delay: -100 * MS_PER_SEC })', 'div.animate' is undefined)
FAIL Reversing an animation when playbackRate > 0 and currentTime > effect end should make it play from the end div.animate is not a function. (In 'div.animate({}, 100 * MS_PER_SEC)', 'div.animate' is undefined)
FAIL Reversing an animation when playbackRate > 0 and currentTime < 0 should make it play from the end div.animate is not a function. (In 'div.animate({}, 100 * MS_PER_SEC)', 'div.animate' is undefined)
FAIL Reversing an animation when playbackRate < 0 and currentTime < 0 should make it play from the start div.animate is not a function. (In 'div.animate({}, 100 * MS_PER_SEC)', 'div.animate' is undefined)
FAIL Reversing an animation when playbackRate < 0 and currentTime > effect end should make it play from the start div.animate is not a function. (In 'div.animate({}, 100 * MS_PER_SEC)', 'div.animate' is undefined)
FAIL Reversing an animation when playbackRate > 0 and currentTime < 0 and the target effect end is positive infinity should throw an exception div.animate is not a function. (In 'div.animate({}, {duration: 100 * MS_PER_SEC,
                                   iterations: Infinity})', 'div.animate' is undefined)
FAIL When reversing throws an exception, the playback rate remains unchanged createDiv(t).animate is not a function. (In 'createDiv(t).animate({}, { duration: 100 * MS_PER_SEC,
                                             iterations: Infinity })', 'createDiv(t).animate' is undefined)
FAIL Reversing animation when playbackRate = 0 and currentTime < 0 and the target effect end is positive infinity should NOT throw an exception div.animate is not a function. (In 'div.animate({}, {duration: 100 * MS_PER_SEC,
                                   iterations: Infinity})', 'div.animate' is undefined)
FAIL Reversing an animation when playbackRate < 0 and currentTime < 0 and the target effect end is positive infinity should make it play from the start div.animate is not a function. (In 'div.animate({}, {duration: 100 * MS_PER_SEC,
                                   iterations: Infinity})', 'div.animate' is undefined)
FAIL Reversing when when playbackRate == 0 should preserve the current time and playback rate div.animate is not a function. (In 'div.animate({}, 100 * MS_PER_SEC)', 'div.animate' is undefined)
FAIL Reversing an animation without an active timeline throws an InvalidStateError assert_throws: function "function () { animation.reverse(); }" threw object "TypeError: animation.reverse is not a function. (In 'animation.reverse()', 'animation.reverse' is undefined)" that is not a DOMException InvalidStateError: property "code" is equal to undefined, expected 11

