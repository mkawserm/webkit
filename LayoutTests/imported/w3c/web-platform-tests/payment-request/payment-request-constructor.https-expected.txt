
FAIL If details.id is missing, assign a identifier Can't find variable: PaymentRequest
FAIL If details.id is missing, assign a unique identifier Can't find variable: PaymentRequest
FAIL If the same id is provided, then use it Can't find variable: PaymentRequest
FAIL Use ids even if they are strange Can't find variable: PaymentRequest
FAIL Use provided request ID Can't find variable: PaymentRequest
FAIL If the length of the methodData sequence is zero, then throw a TypeError assert_throws: function "() => {
      new PaymentRequest([], {
        total: {
          label: "",
          amount: {
            currency: "USD",
            value: "1.00",
          },
        },
      });
    }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If the length of the paymentMethod.supportedMethods sequence is zero, then throw a TypeError assert_throws: function "() => {
      new PaymentRequest(
        [
          {
            supportedMethods: [],
          },
        ],
        {
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.00",
            },
          },
        }
      );
    }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL Method data must be JSON-serializable object (a list in this case) assert_false: shouldn't throw when using a list expected false got true
FAIL Method data must be JSON-serializable object (an object in this case) Can't find variable: PaymentRequest
FAIL Rethrow any exceptions of JSON-serializing paymentMethod.data into a string assert_throws: function "() => {
      new PaymentRequest(
        [
          {
            supportedMethods: ["basic-card"],
            data: recursiveDictionary,
          },
        ],
        {
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.00",
            },
          },
        }
      );
    }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "-"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "notdigits"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "ALSONOTDIGITS"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "10."), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case ".99"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "-10."), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "-.99"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "10-"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "1-0"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "1.0.0"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "1/3"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case ""), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "null"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case " 1.0  "), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case " 1.0 "), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "1.0 "), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "USD$1.0"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "$1.0"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case " 1.0"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "-1"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "-1.0"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "-1.00"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If details.total.amount.value is not a valid decimal monetary value (in this case "-1000.000"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL PaymentDetailsBase.0 can be 0 length assert_true: 0 can be zero length expected true got false
FAIL PaymentDetailsBase.1 can be 0 length assert_true: 1 can be zero length expected true got false
FAIL PaymentDetailsBase.2 can be 0 length assert_true: 2 can be zero length expected true got false
FAIL If the first character of details.total.amount.value is U+002D HYPHEN-MINUS, then throw a TypeError assert_throws: function "() => {
      new PaymentRequest(
        [
          {
            supportedMethods: ["basic-card"],
          },
        ],
        {
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "-1.00",
            },
          },
        }
      );
    }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "-"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "notdigits"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "ALSONOTDIGITS"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "10."), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case ".99"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "-10."), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "-.99"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "10-"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "1-0"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "1.0.0"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "1/3"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case ""), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "null"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case " 1.0  "), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case " 1.0 "), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "1.0 "), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "USD$1.0"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "$1.0"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case " 1.0"), then throw a TypeError assert_throws: function "() => {
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.00",
              },
            },
            displayItems: [
              {
                label: "",
                amount: {
                  currency: "USD",
                  value: amount,
                },
              },
            ],
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL Negative values are allowed for displayItems.amount.value, irrespective of total amount assert_false: shouldn't throw when given a negative value expected false got true
FAIL it handles high precision currency values without throwing assert_false: shouldn't throw when given absurd monetary values expected false got true
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "-"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "notdigits"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "ALSONOTDIGITS"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "10."), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case ".99"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "-10."), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "-.99"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "10-"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "1-0"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "1.0.0"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "1/3"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case ""), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "null"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case " 1.0  "), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case " 1.0 "), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "1.0 "), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "USD$1.0"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case "$1.0"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value (in this case " 1.0"), then throw a TypeError assert_throws: function "() => {
        const invalidAmount = Object.assign({}, defaultAmount, {
          value: amount,
        });
        const invalidShippingOption = Object.assign({}, defaultShippingOption, {
          amount: invalidAmount,
        });
        const details = Object.assign({}, defaultDetails, {
          shippingOptions: [invalidShippingOption],
        });
        new PaymentRequest(defaultMethods, details);
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If there is no selected shipping option, then PaymentRequest.shippingOption remains null Can't find variable: PaymentRequest
FAIL If there is a selected shipping option, then it becomes synchronously selected Can't find variable: PaymentRequest
FAIL If there is a multiple selected shipping options, only the last is selected Can't find variable: PaymentRequest
FAIL If there are any duplicate shipping option ids, then there are no shipping options Can't find variable: PaymentRequest
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "-"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "notdigits"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "ALSONOTDIGITS"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "10."), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case ".99"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "-10."), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "-.99"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "10-"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "1-0"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "1.0.0"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "1/3"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case ""), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "null"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case " 1.0  "), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case " 1.0 "), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "1.0 "), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "USD$1.0"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "$1.0"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case " 1.0"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "-1"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "-1.0"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "-1.00"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If modifier.total.amount.value is not a valid decimal monetary value (in this case "-1000.000"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: amount,
            },
          },
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "-"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "notdigits"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "ALSONOTDIGITS"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "10."), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case ".99"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "-10."), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "-.99"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "10-"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "1-0"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "1.0.0"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "1/3"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case ""), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "null"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case " 1.0  "), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case " 1.0 "), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "1.0 "), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "USD$1.0"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case "$1.0"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL If amount.value of additionalDisplayItems is is not a valid decimal monetary value (in this case " 1.0"), then throw a TypeError assert_throws: function "() => {
        const invalidModifier = {
          supportedMethods: ["basic-card"],
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.0",
            },
          },
          additionalDisplayItems: [
            {
              label: "",
              amount: {
                currency: "USD",
                value: amount,
              },
            },
          ],
        };
        new PaymentRequest(
          [
            {
              supportedMethods: ["basic-card"],
            },
          ],
          {
            modifiers: [invalidModifier],
            total: {
              label: "",
              amount: {
                currency: "USD",
                value: "1.0",
              },
            },
          }
        );
      }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL Modifier data must be JSON-serializable object (a list in this case) assert_false: shouldn't throw when given a list expected false got true
FAIL Modifier data must be JSON-serializable object (a object in this case) assert_false: shouldn't throw when given an object value expected false got true
FAIL Rethrow any exceptions of JSON-serializing modifier.data into a string assert_throws: function "() => {
      new PaymentRequest(
        [
          {
            supportedMethods: ["basic-card"],
          },
        ],
        {
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.00",
            },
          },
          modifiers: [
            {
              supportedMethods: ["basic-card"],
              data: recursiveDictionary,
            },
          ],
        }
      );
    }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL Shipping type should be valid assert_throws: function "() => {
      new PaymentRequest(
        [
          {
            supportedMethods: ["basic-card"],
          },
        ],
        {
          total: {
            label: "",
            amount: {
              currency: "USD",
              value: "1.00",
            },
          },
        },
        {
          shippingType: "invalid",
        }
      );
    }" threw object "ReferenceError: Can't find variable: PaymentRequest" ("ReferenceError") expected object "[object Object]" ("TypeError")
FAIL PaymentRequest.shippingAddress must initially be null Can't find variable: PaymentRequest
FAIL If options.requestShipping is not set, then request.shippingType attribute is null. Can't find variable: PaymentRequest
FAIL If options.requestShipping is true, request.shippingType will be options.shippingType. Can't find variable: PaymentRequest

